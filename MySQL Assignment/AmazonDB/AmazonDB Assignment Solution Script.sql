-- ASSIGNMENT QUESTIONS:

select * from users;
select * from products;
select * from orders;
select * from order_details;  
select * from ratings; 

-- 1. List all customers who have made purchases of more than $80.
SELECT 
    u.name, 
    u.email, 
    SUM(o.total_amount) AS total_spent
FROM 
    users u
JOIN 
    orders o ON u.user_id = o.user_id
GROUP BY 
    u.user_id
HAVING 
    total_spent > 80;
  
-- 2. Retrieve all orders placed in the last 280 days along with the customer name and email.
SELECT 
	u.user_id, 
    u.name, 
    u.email
FROM users u
LEFT JOIN orders o
ON o.user_id = u.user_id
WHERE o.order_date >= CURDATE() - INTERVAL 280 DAY;

-- 3. Find the average product price for each category
SELECT category, AVG(price) AS avg_price
FROM products
GROUP BY category;

-- 4. List all customers who have purchased a product from the category Electronics
	SELECT 
		u.user_id, 
        u.name
	FROM users u 
	INNER JOIN orders o ON o.user_id = u.user_id
	INNER JOIN order_details od ON o.order_id = od.order_id
	INNER JOIN products p ON od.product_id = p.product_id
    WHERE p.category = 'Electronics';
	
-- 5.Find the total number of products sold and the total revenue generated for each product 
SELECT 
	sum(od.quantity) AS tot_num_products,  
    sum(od.quantity * p.price) AS tot_revenue
FROM products p
INNER JOIN order_details od ON p.product_id = od.product_id;

-- 6. Update the price of all products in the Books category, increasing it by 10% Query.
UPDATE products
SET price = price * 1.10
WHERE category = 'Books' AND product_id > 0;

-- 7. Remove all orders that were placed before 2020.
SELECT * 
FROM orders
WHERE order_date < '2020-01-01';

DELETE FROM orders
WHERE order_date < '2020-01-01' AND order_id > 0;

-- 8. Write a query to fetch the order details, including customer name, product name, and quantity, for orders placed on 2024-05-01.
SELECT 
	u.name AS Customer_Name, 
    p.name AS Product_Name, 
    SUM(od.quantity) AS Total_Quantity
FROM users u
INNER JOIN orders o ON u.user_id = o.user_id
INNER JOIN order_details od ON o.order_id = od.order_id
INNER JOIN products p ON p.product_id = od.product_id
GROUP BY u.name, p.name;

-- 9. Fetch all customers and the total number of orders they have placed
SELECT 
    u.name AS customer_name, 
    u.email, 
    COUNT(o.order_id) AS total_orders
FROM 
    users u
LEFT JOIN orders o ON u.user_id = o.user_id
GROUP BY u.user_id;

-- 10. Retrieve the average rating for all products in the Electronics category.
select p.category, AVG(r.rating) AS Avg_Ratings
FROM products p
INNER JOIN ratings r ON p.product_id = r.product_id
WHERE p.category = 'Electronics';

-- 11. List all customers who purchased more than 1 units of any product, including the product name and total quantity purchased
SELECT 
    u.name AS customer_name,
    p.name AS product_name,
    SUM(od.quantity) AS total_quantity
FROM users u
INNER JOIN orders o ON u.user_id = o.user_id
INNER JOIN order_details od ON o.order_id = od.order_id
INNER JOIN products p ON od.product_id = p.product_id
GROUP BY u.user_id, p.product_id, u.name, p.name
HAVING SUM(od.quantity) > 1;

-- 12. Find the total revenue generated by each category along with the category name
SELECT 
    p.category AS category_name,
    sum(od.quantity * p.price) AS Tot_Revenue
FROM products p
inner join order_details od on p.product_id = od.product_id
group by p.category;
